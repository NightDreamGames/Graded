name: Release

on:
  workflow_dispatch:
    inputs:
      channel:
        description: "Release channel: prod, beta, or alpha"
        required: true
        default: "prod"

jobs:
  test:
    uses: ./.github/workflows/test.yaml

  bump_submodule:
    uses: ./.github/workflows/bump_submodule.yaml

  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      build_name: ${{ steps.set-env.outputs.build_name }}
      build_number: ${{ steps.set-env.outputs.build_number }}
      release_channel: ${{ steps.set-env.outputs.release_channel }}
      changelog: ${{ steps.update-changelog.outputs.changelog }}
      stripped_changelog: ${{ steps.update-changelog.outputs.stripped_changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Git user
        uses: fregante/setup-git-user@v2

      - name: Set environment variables
        id: set-env
        run: |
          fullVersion=$(grep -i -e "version: " pubspec.yaml)
          BUILD_NAME=$(echo $fullVersion | cut -d " " -f 2 | cut -d "+" -f 1)
          BUILD_NUMBER=$((${GITHUB_RUN_NUMBER} + 500))
          RELEASE_CHANNEL=${{ github.event.inputs.channel }}

          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=$RELEASE_CHANNEL" >> $GITHUB_ENV

          echo "build_name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "release_channel=$RELEASE_CHANNEL" >> $GITHUB_OUTPUT

      - name: Check if version is used
        run: |
          if [ $(git tag -l "${{ env.BUILD_NAME }}") ]; then
              echo "Version ${{ env.BUILD_NAME }} already exists"
              exit 1
          fi

      - name: Update Changelog
        id: update-changelog
        run: |
          # Get the release changelog
          changelog_file="CHANGELOG.md"
          CHANGELOG=$(sed -n "/\[${{ env.BUILD_NAME }}\]/,/\[.*\] -/p" $changelog_file | sed '$d' | sed '$d' | sed '$s/\\n$//')
          STRIPPED_CHANGELOG=$(echo "$CHANGELOG" | sed '1s/^...//; 3s/^....//; $s/\\n$//')

          if [[ -z "$STRIPPED_CHANGELOG" ]]; then
            echo "Changelog not found for version ${{ env.BUILD_NAME }}."
            exit 1
          fi

          if [ ${#STRIPPED_CHANGELOG} -gt 500 ]; then
            echo "Changelog length greater than 500 characters."
            exit 1
          fi

          echo "$CHANGELOG" > "fastlane/metadata/android/en-US/changelogs/${{ env.BUILD_NUMBER }}.txt"

          # Insert the changelog entry before the previous version
          awk -v BUILD_NAME="${{ env.BUILD_NAME }}" -v CHANGELOG="$CHANGELOG" '
            /^## \[/{ if (!printed) { print CHANGELOG; printed=1 } }
            { print }
          ' $changelog_file > $changelog_file.new && mv $changelog_file.new $changelog_file

          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo 'stripped_changelog<<EOF' >> $GITHUB_OUTPUT
          echo "$STRIPPED_CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo "$CHANGELOG"
          echo
          echo "$STRIPPED_CHANGELOG"

      - name: Update version in pubspec.yaml
        run: |
          perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+)(\d+)$/$1.(${{ env.BUILD_NUMBER }})/e' pubspec.yaml

      - name: Commit changes
        run: |
          #git add fastlane/metadata/android
          #git add pubspec.yaml
          #git commit -m "Versioning changes for ${{ env.BUILD_NAME }}"
          #git push

  build:
    needs: [prepare_release]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: latest
          cache: true
          cache-sdk: true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          java-package: jdk

      - name: Prepare Android signing
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_PASSWORD_ALIAS: ${{ secrets.KEYSTORE_PASSWORD_ALIAS }}
        run: |
          # Create the keystore file from the base64 encoded secret
          echo "$KEYSTORE_BASE64" | base64 --decode > "$RUNNER_TEMP/prod.keystore"

          cat > "$GITHUB_WORKSPACE/android/key.properties" <<EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEYSTORE_PASSWORD_ALIAS
          keyAlias=$KEYSTORE_ALIAS
          storeFile=$RUNNER_TEMP/prod.keystore
          EOF

      - name: Get packages
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Build AAB
        run: flutter build appbundle --release

      #      - name: Prepare signing
      #        uses: ngeri/prepare-signing@v1.0.2
      #        with:
      #          appStoreConnectPrivateKey: ${{ secrets.appStoreConnectPrivateKey }}
      #          keyID: ${{ env.keyID }}
      #          issuerID: ${{ env.issuerID }}
      #          keychainName: ${{ secrets.keychainName }}
      #          keychainPassword: ${{ secrets.keychainPassword }}
      #          base64P12File: ${{ secrets.base64P12File }}
      #          p12Password: ${{ secrets.p12Password }}
      #          bundleIdentifier: ${{ env.bundleIdentifier }}
      #          signType: ${{ env.signType }}
      #
      #      - name: Build IPA
      #        run: flutter build ios --release

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cp build/app/outputs/apk/release/app-release.apk artifacts/graded-${{ needs.prepare_release.outputs.build_name }}.apk
          cp build/app/outputs/bundle/release/app-release.aab artifacts/graded-${{ needs.prepare_release.outputs.build_name }}.aab
          cp build/app/outputs/mapping/release/mapping.txt artifacts/mapping.txt
          cd build/app/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib && zip -r -0 $GITHUB_WORKSPACE/artifacts/lib.zip . && cd $GITHUB_WORKSPACE
      #          cp build/ios/ipa/Graded.ipa artifacts/graded-${{ env.BUILD_NAME }}.ipa
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            artifacts/*.aab
            artifacts/*.apk
            artifacts/mapping.txt
            artifacts/lib.zip
            artifacts/*.ipa

  publish:
    needs: [bump_submodule, prepare_release, test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-artifacts
          path: artifacts

      - name: Write changelog to file
        run: echo "${{ needs.prepare_release.outputs.changelog }}" > changelog.txt

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*.apk,artifacts/*.aab,artifacts/*.ipa"
          bodyFile: "changelog.txt"
          name: "${{ needs.prepare_release.outputs.build_name }}"
          tag: "${{ needs.prepare_release.outputs.build_name }}"
          draft: true
          commit: main

      - name: Set track based on input
        id: set-track
        run: |
          case "${{ needs.prepare_release.outputs.release_channel }}" in
            prod) TRACK=production ;;
            beta) TRACK=beta ;;
            alpha) TRACK=qa ;;
            *) TRACK=production ;;
          esac
          echo "TRACK=$TRACK" >> $GITHUB_ENV

      - name: Create localized changelog files
        run: |
          mkdir -p changelogs
          echo "${{ needs.prepare_release.outputs.stripped_changelog }}" > changelogs/whatsnew-en-GB
          echo "${{ needs.prepare_release.outputs.stripped_changelog }}" > changelogs/whatsnew-fr-FR
          echo "${{ needs.prepare_release.outputs.stripped_changelog }}" > changelogs/whatsnew-de-DE

      - name: Publish to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: com.NightDreamGames.Grade.ly
          releaseFiles: artifacts/*.aab
          track: ${{ env.TRACK }}
          whatsNewDirectory: changelogs
          mappingFile: artifacts/mapping.txt
          debugSymbols: artifacts/lib.zip

      - name: Publish to App Store
        run: |
          # Logic to publish to the App Store
