plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
	localPropertiesFile.withReader('UTF-8') { reader ->
		localProperties.load(reader)
	}
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
	flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
	flutterVersionName = '1.0'
}

android {
	namespace 'com.nightdreamgames.grade.ly'

	compileOptions {
		sourceCompatibility 17
		targetCompatibility 17
	}

	kotlinOptions {
		jvmTarget = '17'
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
	}

	defaultConfig {
		applicationId "com.NightDreamGames.Grade.ly"
		minSdkVersion 21
		compileSdk 35
		targetSdkVersion 35
		versionCode flutterVersionCode.toInteger()
		versionName flutterVersionName
		vectorDrawables.generatedDensities = []
		resourceConfigurations += ["en", "fr", "de", "nl", "lb"]
		resConfigs "en", "fr", "de", "nl", "lb"
	}

	signingConfigs {
		release {
			if (System.getenv()["CONTINUOUS_INTEGRATION"]) { // CONTINUOUS_INTEGRATION=true is exported by Codemagic
				storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
				storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
				keyAlias System.getenv()["CM_KEY_ALIAS"]
				keyPassword System.getenv()["CM_KEY_PASSWORD"]
			} else {
				keyAlias keystoreProperties['keyAlias']
				keyPassword keystoreProperties['keyPassword']
				storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
				storePassword keystoreProperties['storePassword']
			}
		}
	}

	buildTypes {
		debug {
			signingConfig signingConfigs.debug
			applicationIdSuffix '.debug'
			versionNameSuffix '-DEBUG'
		}

		profile {
			signingConfig signingConfigs.debug
			versionNameSuffix '-PROFILE'
		}

		release {
			signingConfig signingConfigs.release
		}
	}

	packagingOptions {
		jniLibs {
			useLegacyPackaging = true
		}
	}
}

flutter {
	source '../..'
}

dependencies {}
